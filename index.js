// Generated by CoffeeScript 1.12.4
var Api, Color, Light, LightGroup, r, request, toXY,
  slice = [].slice;

request = require('sync-request');

Color = require('onecolor');

module.exports = this;

r = function() {
  var args;
  args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
  return JSON.parse(request.apply(null, args).getBody('utf8'));
};

toXY = function(color) {
  var X, Y, Z, blue, green, red, ref, ref1, xy;
  ref = [color.red(), color.green(), color.blue()], red = ref[0], green = ref[1], blue = ref[2];
  ref1 = [red * 0.664511 + green * 0.154324 + blue * 0.162028, red * 0.283881 + green * 0.668433 + blue * 0.047685, red * 0.000088 + green * 0.072310 + blue * 0.986039], X = ref1[0], Y = ref1[1], Z = ref1[2];
  xy = [X / (X + Y + Z), Y / (X + Y + Z)];
  return {
    xy: xy
  };
};

this.Light = Light = (function() {
  function Light(api, light, lightId1) {
    var prop, value;
    this.api = api;
    this.lightId = lightId1;
    for (prop in light) {
      value = light[prop];
      this[prop] = value;
    }
  }

  Light.prototype.setState = function(state) {
    var prop, value;
    r('PUT', this.api.url("lights/" + this.lightId + "/state"), {
      json: state
    });
    for (prop in state) {
      value = state[prop];
      this.state[prop] = value;
    }
    return this;
  };

  Light.prototype.turnOn = function() {
    return this.setState({
      on: true
    });
  };

  Light.prototype.turnOff = function() {
    return this.setState({
      on: false
    });
  };

  Light.prototype.setColor = function(color) {
    return this.setState(toXY(Color(color)));
  };

  Light.prototype.setBrightness = function(value) {
    return this.setState({
      bri: Math.round(value * 254)
    });
  };

  Light.prototype.setTransitionTime = function(value) {
    return this.setState({
      transitiontime: value
    });
  };

  Light.prototype.setEffect = function(value) {
    return this.setState({
      effect: value
    });
  };

  return Light;

})();

this.LightGroup = LightGroup = (function() {
  function LightGroup(lights) {
    var _, i, j, len, len1, light, lightName, prop, ref, ref1, ref2, ref3, value;
    if (Array.isArray(lights)) {
      this.array = lights;
      this.object = {};
      ref = this.array;
      for (i = 0, len = ref.length; i < len; i++) {
        light = ref[i];
        this.object[light.name] = light;
      }
    } else {
      this.array = (function() {
        var results;
        results = [];
        for (_ in lights) {
          light = lights[_];
          results.push(light);
        }
        return results;
      })();
      this.object = lights;
    }
    ref1 = this.array;
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      light = ref1[j];
      if (!(light instanceof Light)) {
        throw "Not a light";
      }
    }
    ref2 = this.object;
    for (lightName in ref2) {
      light = ref2[lightName];
      this[lightName] = light;
    }
    ref3 = new Light;
    for (prop in ref3) {
      value = ref3[prop];
      if (typeof value === "function") {
        (function(_this) {
          return (function(prop) {
            return _this[prop] = function() {
              var args, k, len2, ref4, results;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              ref4 = _this.array;
              results = [];
              for (k = 0, len2 = ref4.length; k < len2; k++) {
                light = ref4[k];
                results.push(light[prop].apply(light, args));
              }
              return results;
            };
          });
        })(this)(prop);
      }
    }
  }

  LightGroup.prototype.remove = function(lightName) {
    this.array.splice(this.array.indexOf(this.object[lightName]), 1);
    delete this.object[lightName];
    return delete this[lightName];
  };

  LightGroup.prototype.add = function(light, name) {
    if (!(light instanceof Light)) {
      throw "First argument to LightGroup::add must be a Light!";
    }
    this.array.push(light);
    this.object[name != null ? name : light.name] = light;
    return this[name != null ? name : light.name] = light;
  };

  return LightGroup;

})();

this.Api = Api = (function() {
  function Api(arg) {
    var bridges, ref;
    ref = arg != null ? arg : {}, this.username = ref.username, this.hostname = ref.hostname;
    if (this.hostname == null) {
      bridges = r('GET', "https://www.meethue.com/api/nupnp");
      if ((bridges != null ? bridges[0] : void 0) == null) {
        throw "Bridge not found";
      }
      this.hostname = bridges[0].internalipaddress;
      console.log("Detected bridge " + this.hostname);
    }
  }

  Api.prototype.url = function(path) {
    return "http://" + this.hostname + "/api/" + this.username + "/" + path;
  };

  Api.prototype.getLights = function() {
    var light, lightId, ref;
    this.lights = {};
    ref = r('GET', this.url("lights"));
    for (lightId in ref) {
      light = ref[lightId];
      this.lights[light.name] = new Light(this, light, lightId);
    }
    return this.lights = new LightGroup(this.lights);
  };

  return Api;

})();
